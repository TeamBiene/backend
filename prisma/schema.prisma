// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String
  passwordHash       String
  profilePhoto       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  beekeeper          Beekeeper?
  farmer             Farmer?
  prostedNews        News[]
  associationMembers AssociationMember[]
  events             Event[]
  publicComments     PublicComment[]
}

model Beekeeper {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id
  colonies  Colony[]
}

model Farmer {
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @id
}

model Colony {
  id             String          @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  count          Int
  flightRadius   Int
  colonyComments ColonyComment[]
  beekeeper      Beekeeper?      @relation(fields: [beekeeperId], references: [userId])
  beekeeperId    String?
  breed          Breed           @relation(fields: [breedId], references: [id])
  breedId        String
  longitude      Float
  latitude       Float
}

model Breed {
  id       String   @id @default(cuid())
  name     String   @unique
  colonies Colony[]
}

model ColonyComment {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  colony      Colony   @relation(fields: [colonyId], references: [id])
  colonyId    String
  content     String
}

model PublicComment {
  id          String   @id @default(cuid())
  name        String
  description String
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  content     String
  news        News?    @relation(fields: [newsId], references: [id])
  newsId      String?
  event       Event?   @relation(fields: [eventId], references: [id])
  eventId     String?
}

model News {
  id            String          @id @default(cuid())
  title         String
  content       String
  hasPriority   Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  association   Association     @relation(fields: [associationId], references: [id])
  associationId String
  author        User            @relation(fields: [authorId], references: [id])
  authorId      String
  comments      PublicComment[]
}

model Event {
  id            String          @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  association   Association     @relation(fields: [associationId], references: [id])
  associationId String
  author        User            @relation(fields: [authorId], references: [id])
  authorId      String
  comments      PublicComment[]
}

model Association {
  id                 String              @id @default(cuid())
  name               String
  description        String
  location           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  associationMembers AssociationMember[]
  news               News[]
  events             Event[]
}

model AssociationMember {
  association   Association @relation(fields: [associationId], references: [id])
  associationId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  isAdmin       Boolean     @default(false)

  @@id([associationId, userId])
}
